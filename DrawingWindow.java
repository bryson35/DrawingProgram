/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package drawingprogram;

import java.awt.Color;

/**
 *
 * @author clatulip
 */
public class DrawingWindow extends javax.swing.JFrame {
    private DrawingModel myModel;
    /**
     * Constructor that creates new JFrame form with various elements on it
     * The elements have been designed using NetBeans design view
     * @param model
     */
    public DrawingWindow(DrawingModel model) {
        // save the model so we can use it
        myModel = model;
        // this calls the NetBeans auto-generated code that creates the
        // window and adds all the GUI elements to it
        initComponents();
        // change the window title (you can change this whatever you want)
        this.setTitle("Celine's Basic Drawing Program");
        // pass the drawingModel to the canvas, because it needs it, too
        drawingCanvas.setModel(myModel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        clearButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(60, 0), new java.awt.Dimension(60, 0), new java.awt.Dimension(60, 32767));
        outlineLabel = new javax.swing.JLabel();
        redLineToggle = new javax.swing.JToggleButton();
        blackLineToggle = new javax.swing.JToggleButton();
        filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(20, 0), new java.awt.Dimension(20, 0), new java.awt.Dimension(20, 32767));
        fillLabel = new javax.swing.JLabel();
        whiteFillToggle = new javax.swing.JToggleButton();
        drawingCanvas = new drawingprogram.DrawingCanvas();
        UndoButton = new javax.swing.JButton();
        RedoButton = new javax.swing.JButton();
        shapeComboBox = new javax.swing.JComboBox();
        colorButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jToolBar1.setRollover(true);

        clearButton.setText("Clear");
        clearButton.setFocusable(false);
        clearButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        clearButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(clearButton);

        saveButton.setText("Save");
        saveButton.setFocusable(false);
        saveButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saveButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(saveButton);
        jToolBar1.add(filler1);

        outlineLabel.setText("Outline:");
        jToolBar1.add(outlineLabel);

        redLineToggle.setText("Red");
        redLineToggle.setFocusable(false);
        redLineToggle.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        redLineToggle.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        redLineToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redLineToggleActionPerformed(evt);
            }
        });
        jToolBar1.add(redLineToggle);

        blackLineToggle.setSelected(true);
        blackLineToggle.setText("Black");
        blackLineToggle.setFocusable(false);
        blackLineToggle.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        blackLineToggle.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        blackLineToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blackLineToggleActionPerformed(evt);
            }
        });
        jToolBar1.add(blackLineToggle);
        jToolBar1.add(filler3);

        fillLabel.setText("Fill:");
        jToolBar1.add(fillLabel);

        whiteFillToggle.setSelected(true);
        whiteFillToggle.setFocusable(false);
        whiteFillToggle.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        whiteFillToggle.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        whiteFillToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                whiteFillToggleActionPerformed(evt);
            }
        });
        jToolBar1.add(whiteFillToggle);

        drawingCanvas.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        drawingCanvas.setPreferredSize(new java.awt.Dimension(500, 500));
        drawingCanvas.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                drawingCanvasMouseDragged(evt);
            }
        });
        drawingCanvas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                drawingCanvasMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                drawingCanvasMouseReleased(evt);
            }
        });

        UndoButton.setText("Undo");
        UndoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UndoButtonActionPerformed(evt);
            }
        });

        RedoButton.setText("Redo");
        RedoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RedoButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout drawingCanvasLayout = new javax.swing.GroupLayout(drawingCanvas);
        drawingCanvas.setLayout(drawingCanvasLayout);
        drawingCanvasLayout.setHorizontalGroup(
            drawingCanvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(drawingCanvasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(UndoButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(RedoButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        drawingCanvasLayout.setVerticalGroup(
            drawingCanvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(drawingCanvasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(drawingCanvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(UndoButton)
                    .addComponent(RedoButton))
                .addContainerGap(585, Short.MAX_VALUE))
        );

        shapeComboBox.setModel(new javax.swing.DefaultComboBoxModel(getShapeTypeValues())
        );
        shapeComboBox.setSelectedItem(myModel.getCurrentShape());
        shapeComboBox.setToolTipText("Pick a shape to draw");
        shapeComboBox.setPreferredSize(new java.awt.Dimension(50, 27));
        shapeComboBox.setRequestFocusEnabled(false);
        shapeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shapeComboBoxActionPerformed(evt);
            }
        });

        colorButton.setText("Fill Color");
        colorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(colorButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 69, Short.MAX_VALUE)
                .addComponent(shapeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(drawingCanvas, javax.swing.GroupLayout.DEFAULT_SIZE, 690, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(shapeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addComponent(colorButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(drawingCanvas, javax.swing.GroupLayout.DEFAULT_SIZE, 624, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Clear button handler
     * @param evt 
     */
    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        // tell the model to clear itself and then update the canvas
        myModel.clearModel();
        drawingCanvas.update();
    }//GEN-LAST:event_clearButtonActionPerformed

    /**
     * Mouse pressed handler
     * @param evt gives access to x and y coords where mouse pressed down
     */
    private void drawingCanvasMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drawingCanvasMousePressed
        // Get the x and y coords
        startX = evt.getX();
        startY = evt.getY();
        // stuff to enable interactive drawing
        myModel.setMouseDown(true);
        myModel.setStartX(startX);
        myModel.setStartY(startY);
    }//GEN-LAST:event_drawingCanvasMousePressed

    /**
     * Mouse released handler
     * @param evt gives access to x and y coords where mouse was released
     */
    private void drawingCanvasMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drawingCanvasMouseReleased
        // Get the x and y coords
        endX = evt.getX();
        endY = evt.getY();
        // add new shape to the model
        switch (myModel.getCurrentShape()) {
            case LINE:
                myModel.addNewLine(new Line(
                        startX, 
                        startY, 
                        endX, 
                        endY, 
                        myModel.getLineColor()));
                break;
            case RECT:
                myModel.addNewRect(new Rectangle(
                        startX, 
                        startY, 
                        endX, 
                        endY,
                        myModel.getLineColor(),
                        myModel.getFillColor()));
                break;
            case CIRCLE:
                myModel.addNewCircle(new Circle(
                        startX, 
                        startY, 
                        endX, 
                        endY,
                        myModel.getLineColor(),
                        myModel.getFillColor()));
                break;
            case RECTANGLE3D:
                myModel.addNewRectangle3D(new Rect3D(
                startX,
                startY,
                endX,
                endY,
                myModel.getLineColor(),
                myModel.getFillColor()));
        }
        myModel.setMouseDown(false);
        drawingCanvas.update();
    }//GEN-LAST:event_drawingCanvasMouseReleased

    /**
     * Toggle button handler for the blackLine toggle button
     * @param evt 
     */
    private void blackLineToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blackLineToggleActionPerformed
        // set current line color in model
        myModel.setLineColor(Color.BLACK);
        // update other toggles
        redLineToggle.setSelected(false);
    }//GEN-LAST:event_blackLineToggleActionPerformed

    /**
     * Toggle button handler for the redLine toggle button
     * @param evt 
     */
    private void redLineToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redLineToggleActionPerformed
        // set the current line color in model
        myModel.setLineColor(Color.RED);
        // update other toggles
        blackLineToggle.setSelected(false);
    }//GEN-LAST:event_redLineToggleActionPerformed

    /**
     * Canvas mouse drag handler, gets called whenever the user is dragging 
     * cursor across canvas with button pressed
     * @param evt gives access to current x and y coords
     */
    private void drawingCanvasMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drawingCanvasMouseDragged
        // get x and y coords, save in model
        myModel.setCurrentX(evt.getX());
        myModel.setCurrentY(evt.getY());
        // update canvas (needed to make drawing interactive)
        drawingCanvas.update();
    }//GEN-LAST:event_drawingCanvasMouseDragged

    /**
     * Toggle button handler for the whiteFill toggle button
     * @param evt 
     */
    private void whiteFillToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_whiteFillToggleActionPerformed
        // update fill color in model
        myModel.setFillColor(Color.WHITE);
        // update other toggles

    }//GEN-LAST:event_whiteFillToggleActionPerformed

    /**
     * Handler for the shapeComboBox
     * NB: you should not need to change this code
     * @param evt 
     */
    private void shapeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shapeComboBoxActionPerformed
        // update current shape in model
        DrawingModel.ShapeType selectedShape = DrawingModel.ShapeType.values()[shapeComboBox.getSelectedIndex()];
        myModel.setCurrentShape(selectedShape);
        
    }//GEN-LAST:event_shapeComboBoxActionPerformed

    /**
     * Save button handler
     * @param evt 
     */
    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        // create and show the save file dialog window
        SaveDialogWindow saveWindow = new SaveDialogWindow(drawingCanvas);
        saveWindow.setVisible(true);    
    }//GEN-LAST:event_saveButtonActionPerformed

    private void UndoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UndoButtonActionPerformed
        // TODO add your handling code here:
        if (!myModel.getShapes().isEmpty()){
        myModel.addUndo();
        drawingCanvas.update();
        }
    }//GEN-LAST:event_UndoButtonActionPerformed

    private void RedoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RedoButtonActionPerformed
        // TODO add your handling code here:
       if (!myModel.getUndo().isEmpty()){
        myModel.addRedo();
        drawingCanvas.update();
       }
    }//GEN-LAST:event_RedoButtonActionPerformed

    private void colorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorButtonActionPerformed
        // TODO add your handling code here:
        ColorPickerWindow cp = new ColorPickerWindow(myModel);
        cp.setVisible(true);
    }//GEN-LAST:event_colorButtonActionPerformed

    /**
     * This is used to populate the comboBox on the window
     * @return the list of shapes in the enumerated type
     */
    private DrawingModel.ShapeType[] getShapeTypeValues() {
        return DrawingModel.ShapeType.values();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton RedoButton;
    private javax.swing.JButton UndoButton;
    private javax.swing.JToggleButton blackLineToggle;
    private javax.swing.JButton clearButton;
    private javax.swing.JButton colorButton;
    private drawingprogram.DrawingCanvas drawingCanvas;
    private javax.swing.JLabel fillLabel;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler3;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JLabel outlineLabel;
    private javax.swing.JToggleButton redLineToggle;
    private javax.swing.JButton saveButton;
    private javax.swing.JComboBox shapeComboBox;
    private javax.swing.JToggleButton whiteFillToggle;
    // End of variables declaration//GEN-END:variables
    
    // local fields needed for interactive drawing
    private int startX;
    private int startY;
    private int endX;
    private int endY;
    private int currentX;
    private int currentY;
    
   
    
}
